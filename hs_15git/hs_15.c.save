
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ANZAHL 10

void bubble (int *, int);
void ausgabe (int *, int);
int compare_value (int, int);

int main ()
{
  printf ("\nHS_15 - Sortieren mit Funktionszeigern\n\n");
  srand ((unsigned int) time (NULL));	//Zufallszahlen initialisieren
  int *iDaten = (int *) malloc (ANZAHL * sizeof (int));
  if (iDaten != NULL)		//...
  {
    for (int i = 0; i < ANZAHL; i++)	//...
    {
      *(iDaten + i) = rand () % (ANZAHL * 100);	//...
    }
    printf ("\n--- VOR dem Sortieren ---\n");
    ausgabe (iDaten, ANZAHL);
    bubble (iDaten, ANZAHL);	//...
    printf ("\n--- NACH dem Sortieren ---\n");
    ausgabe (iDaten, ANZAHL);
    free (iDaten);		// reservierten Speicher wieder freigeben
  }
  else
    printf ("Reservierung fehlgeschlagen - FEHLER!");
  return 0;
}

void ausgabe (int *iWerte, int iZahl)	// Ausgeben eines int-Arrays
{
  for (int i = 0; i < iZahl; i++)
    printf ("%d\t%d\n", i, iWerte[i]);
}

void bubble (int *iWerte, int iZahl)	// Sortieren eines int-Arrays
{
  int iFlag;
  do
  {
    iFlag = 0;
    for (int i = 0; i < iZahl - 1; i++)
    {
      if (compare_value (iWerte[i], iWerte[i + 1]))	// Vergleich der Elemente
      {
	// ggf. Tauschen der Elemente
	int iHilf = iWerte[i];
	iWerte[i] = iWerte[i + 1];
	iWerte[i + 1] = iHilf;
	iFlag = 1;
      }
    }
  }
  while (iFlag);
}

int compare_value (int a, int b)	// Vergleichsfunktion
{
  return (a > b);
}
